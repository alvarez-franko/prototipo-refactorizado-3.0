/**
*    File        : frontend/js/api/apiFactory.js
*    Project     : CRUD PHP
*    Author      : Tecnolog√≠as Inform√°ticas B - Facultad de Ingenier√≠a - UNMdP
*    License     : http://www.gnu.org/licenses/gpl.txt  GNU GPL 3.0
*    Date        : Mayo 2025
*    Status      : Prototype
*    Iteration   : 3.0 ( prototype )
*/

/*Este archivo define la funci√≥n gen√©rica createAPI() que
permite crear objetos de acceso al backend para cualquier
m√≥dulo (students, subjects, etc.). */

export function createAPI(moduleName, config = {}) 
/*Se define y exporta una funci√≥n llamada createAPI que recibe
dos par√°metros:
‚óè moduleName: el nombre del m√≥dulo (por ejemplo
'students').
‚óè config: un objeto opcional (vac√≠o por defecto) que
permite configurar opciones avanzadas si hace falta. */
{
    const API_URL = config.urlOverride ?? `../../backend/server.php?module=${moduleName}`;
    /*Construcci√≥n de la URL de acceso al servidor:
‚óè Si config.urlOverride est√° definido, se usa ese valor
como URL personalizada.
‚óè Si no, se construye una URL est√°ndar apuntando a
server.php?module=nombre.
üìå El operador ?? (Operador de coalescencia nula) significa:
‚Äúsi el valor de la izquierda es null o undefined, usar el de la
derecha‚Äù. */

    async function sendJSON(method, data) 
    /*Esta funci√≥n auxiliar interna se usa para enviar datos al
servidor usando los m√©todos HTTP POST, PUT o DELETE. */
    {
        const res = await fetch(API_URL,
        {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        /*Se hace una petici√≥n fetch() al backend (method: GET):
‚óè method: puede ser POST, PUT o DELETE.
‚óè headers: indica que se est√° enviando JSON.
‚óè body: convierte los datos a texto JSON antes de enviarlos
con JSON.stringify(data).
üìå El uso de await indica que se espera la respuesta antes de
seguir. */

        if (!res.ok) throw new Error(`Error en ${method}`);
        /*Si la respuesta del servidor no fue exitosa (res.ok es false),
se lanza un error indicando el tipo de operaci√≥n que fall√≥. */
        return await res.json();
        /*Si todo sali√≥ bien, se convierte la respuesta en un objeto
JavaScript usando res.json() y se devuelve. */
    }

    return {
        /*La funci√≥n createAPI devuelve un objeto con 4 funciones que
representan las operaciones b√°sicas del CRUD: */
        async fetchAll()
        {
            const res = await fetch(API_URL);
            if (!res.ok) throw new Error("No se pudieron obtener los datos");
            return await res.json();
        },
        /*Obtiene todos los registros del m√≥dulo desde el servidor.
‚óè Usa fetch para hacer una petici√≥n GET simple.
‚óè Si la respuesta no es v√°lida, lanza un error.
‚óè Devuelve los datos convertidos en objeto JSON. */

        async create(data)
        {
            return await sendJSON('POST', data);
        },
        /*Crea un nuevo registro en el backend (alta). Usa la funci√≥n
auxiliar sendJSON con m√©todo POST. */

        async update(data)
        {
            return await sendJSON('PUT', data);
        },
        /*üîπ Actualiza un registro existente en el backend. Usa sendJSON
con m√©todo PUT. El par√°metro data debe incluir el id del
registro que se desea actualizar. */

        async remove(id)
        {
            return await sendJSON('DELETE', { id });
        }
        /*Elimina un registro del backend, usando DELETE. Se pasa un
objeto { id } como contenido de la petici√≥n. */
    };
}
