<?php
/**
*    File        : backend/server.php
*    Project     : CRUD PHP
*    Author      : Tecnolog√≠as Inform√°ticas B - Facultad de Ingenier√≠a - UNMdP
*    License     : http://www.gnu.org/licenses/gpl.txt  GNU GPL 3.0
*    Date        : Mayo 2025
*    Status      : Prototype
*    Iteration   : 3.0 ( prototype )
*/

/**FOR DEBUG: */
// ini_set('display_errors', 1);
// ini_set('display_startup_errors', 1);
// error_reporting(E_ALL);

/*Este archivo es el punto de entrada principal al backend. Se
encarga de recibir las solicitudes desde el frontend y
redirigirlas al m√≥dulo correspondiente (por ejemplo, students,
subjects, etc.). */

header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");
/*Estas tres l√≠neas son fundamentales cuando el frontend
(JavaScript) est√° separado del backend (PHP).
1. Access-Control-Allow-Origin: * ‚û§ Permite que cualquier
sitio web se comunique con este servidor. (En producci√≥n,
se suele reemplazar * por una direcci√≥n espec√≠fica.)
2. Access-Control-Allow-Methods: GET, POST, PUT, DELETE,
OPTIONS ‚û§ Indica qu√© m√©todos HTTP se permiten. Son las
acciones b√°sicas del CRUD.
3. Access-Control-Allow-Headers: Content-Type ‚û§ Permite que
las solicitudes incluyan el tipo de contenido (por
ejemplo, JSON).
üß†Esto se conoce como configuraci√≥n CORS (Cross-Origin
Resource Sharing). */

function sendCodeMessage($code, $message = "") //Funci√≥n auxiliar para responder con c√≥digo HTTP
{
    http_response_code($code);
    echo json_encode(["message" => $message]);
    exit();
}
/*Esta funci√≥n sirve para enviar una respuesta HTTP
personalizada al frontend.
‚óè http_response_code($code): env√≠a un c√≥digo de estado HTTP
(como 200, 400, 404).
‚óè echo json_encode(...): convierte un mensaje PHP en texto
JSON para que lo entienda el navegador.
‚óè exit(): detiene el script inmediatamente. */

// Respuesta correcta para solicitudes OPTIONS (preflight)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS')
{
    sendCodeMessage(200); // 200 OK
}
/*El navegador a veces env√≠a primero una solicitud de
prueba llamada OPTIONS para verificar si puede hablar con
el servidor. Si la solicitud es OPTIONS, respondemos con
un c√≥digo 200 y no hacemos m√°s nada. */

// Obtener el m√≥dulo desde la query string
$uri = parse_url($_SERVER['REQUEST_URI']);
$query = $uri['query'] ?? '';
parse_str($query, $query_array);
$module = $query_array['module'] ?? null;
/*Estas l√≠neas extraen el nombre del m√≥dulo desde la URL del
navegador.
Por ejemplo para la URL: server.php?module=students

1. $_SERVER['REQUEST_URI']: contiene la ruta completa que
pidi√≥ el navegador.
2. parse_url(...): separa la parte ?module=students.
3. parse_str(...): convierte el string en un array
asociativo.
4. Resultado: $query_array['module'] tendr√° el valor
'students'./*/



// Validaci√≥n de existencia del m√≥dulo
if (!$module)
{
    sendCodeMessage(400, "M√≥dulo no especificado");
}
    /*Si no se especific√≥ el par√°metro module, respondemos con un
error 400 usando la funci√≥n auxiliar: sendCodeMessage.*/



// Validaci√≥n de caracteres seguros: solo letras, n√∫meros y guiones bajos
if (!preg_match('/^\w+$/', $module))
{
    sendCodeMessage(400, "Nombre de m√≥dulo inv√°lido");
}
   /* Si el nombre del m√≥dulo contiene caracteres no permitidos,
tambi√©n damos error.
‚óè La expresi√≥n regular ^\w+$ significa: solo letras,
n√∫meros y guiones bajos.
‚óè Esto protege contra inyecciones de c√≥digo o rutas
maliciosas.*/



// Buscar el archivo de ruta correspondiente
$routeFile = __DIR__ . "/routes/{$module}Routes.php";
/*Construimos el path del archivo PHP que maneja ese m√≥dulo.Por
ejemplo, si $module es 'students', entonces el archivo es:
backend/routes/studentsRoutes.php.
__DIR__ es una constante que contiene la ruta de esta carpeta
(backend/).*/



if (file_exists($routeFile))
{
    require_once($routeFile);
}
else
{
    sendCodeMessage(404, "Ruta para el m√≥dulo '{$module}' no encontrada");
}
   /* Si el archivo existe, lo cargamos y ejecutamos con
require_once. Ese archivo ser√° responsable de manejar el GET,
POST, PUT, DELETE del m√≥dulo. Si el archivo no existe,
enviamos un error 404 Not Found.



¬øQu√© hace server.php?
1. Recibe la solicitud del navegador o frontend.
2. Valida si el m√≥dulo es correcto.
3. Redirige la petici√≥n al archivo PHP adecuado seg√∫n el
m√≥dulo.
4. Maneja solicitudes OPTIONS autom√°ticamente para CORS.
5. Si algo falla, responde con un mensaje de error en JSON.
